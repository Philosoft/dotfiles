/*
 * Лабораторная работа №1
 * «Кривая Лагранжа»
 * по предмету «Геометрическое моделирование в САПР»
 */

// Global vars {{{
var arr = [];
// }}}

LibCanvas.extract();

var Button = atom.Class({
	Implements: [ Drawable, Clickable, Draggable ],

	initialize: function (shape) {
		this.setShape(shape);
	},

	get style () {
		return this.active ?
				{
					shadow  : { shadowBlur: 6, shadowColor: '#9f9' },
					gradient: { from: '#464', to  : '#242' },
					stroke  : '#8c8', text: '#cfc'
				}
				: this.hover ?
				{
					shadow  : { shadowBlur: 6, shadowColor: '#f99' },
					gradient: { from: '#644', to  : '#422' },
					stroke  : '#c88', text: '#fcc'
				}
				:
				{
					shadow  : { shadowBlur: 3, shadowColor: '#999' },
					gradient: { from: '#444', to  : '#222' },
					stroke  : '#888', text: '#ccc'
				}
	},

	draw: function () {
		var ctx = this.libcanvas.ctx, style = this.style;
		var gradient = ctx.createLinearGradient(this.shape.from, this.shape.bottomLeft);
		gradient.addColorStop(0.0, style.gradient.from);
		gradient.addColorStop(1.0, style.gradient.to  );

		ctx
			.save()
			.set(style.shadow)
			.fill(this.shape, 'rgba(0,0,0,0)')
			.restore()
			.save()
			.clip(this.shape)
			.fill(gradient)
			.restore()
			.save()
			.set({ lineWidth: 1, globalAlpha: 0.4 })
			.stroke(this.shape, style.stroke)
			.restore()
			.save()
			.set(style.shadow)
			.text({
				text: 'button',
				color  : style.text,
				to     : this.shape,
				align  : 'center',
				weight : 'bold',
				size   : 16,
				padding: [3,3]
			})
		.restore();
	}
});

atom.dom(function() {
	var Item = atom.Class({
		Implements: [ Drawable, Draggable ],

		initialize: function (center) {
			this.shape = new Circle(center, 10);
		},


		update: function () {
			this.libcanvas.update();
		},


		draw: function () {
			this.libcanvas.ctx.stroke(this.shape, 'black');
		}
});

var MyLine  = atom.Class({
	Implements: [Drawable],

	initialize: function(from, to) {
			this.shape = new Line(from, to);
		},
	
	update: function() {
			this.libcanvas.update();
		},

	draw: function() {
			this.libcanvas.ctx.stroke(this.shape, 'red');
		}
});

var libcanvas = new LibCanvas('canvas', {clear: '#ababab'})
	.size({ width: 900, height: 400 }, true)
	.listenMouse();
	
/*
 *@event: dblclick
 *@action: add point
 */
libcanvas.mouse.addEvent('dblclick', function (e) {
	var center = e.offset.clone()
	it = new Item(new Point(center));
	it.draggable();
	it.listenMouse();
	arr.push(it);

	libcanvas.addElement(it)
		.start()
		.addFunc( it.update.bind(it) );

	if(arr.length)
	{
		//Сам метод Лагранжа
		var last_x = arr[0].shape.center.x;
		var last_y = arr[0].shape.center.y;
		for(var x = arr[0].shape.center.x + 1 ; x <= arr[arr.length - 1].shape.center.x; x += 1)
		{
			var y = 0;
			for(var i = 0; i < arr.length; i++)
			{                                                             
				var lj = 1;
				for(var j = 0; j < arr.length; j++)
				{
					if(i != j)                  
						lj *= (x - arr[j].shape.center.x) / (arr[i].shape.center.x - arr[j].shape.center.x);
				}
				y += arr[i].shape.center.y * lj;
			}
			l = new MyLine(new Point(last_x, last_y), new Point(x, y));
			libcanvas.addElement(l)
				.start()
				.addFunc(l.update.bind(l));
			last_x = x;
			last_y = y;
		}
	}

});


libcanvas.show();
libcanvas.start(
		function(){
			var ctx = libcanvas.ctx;
			ctx.set({font: '16px monospace', align: 'center'})
				.fillText('Лагранж', 15, 25);
		}
		);
});
