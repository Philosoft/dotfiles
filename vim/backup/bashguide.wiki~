Для начала оговоримся, что  мы имеем дело именно с башем — со скриптами под свои нужды, автоматизацией рутинных действий и т.п. никаких загрузочных скриптов и прочего restricted posix shell.
 
# Больше про сравнения
# Добавить примеров
# Встроенные команды
# restricted shell
# coproc
# select

	= Сравнения =
{{{if [[ условие ]]; then}}}
Особенности этой конструкции в баше:
1. внутри [[ ]] не действует «разбиение на слова» ⇒ мы спокойно можем использовать переменные без «заковычивания», если в строке есть пробел, ничего страшного не случится.
2. спецсимволы *, ? и [ воспринимаются как обычные символы (никакого глобинга)
3. всё остальное действует

	= Арифметика =
{{{let i=0
let i++
let i--
let i=10*20
let i**2 #возведение в степень}}}
Кроме того
# унарные - и +
# ++var, --var
# var++, var--
# ! и ~ логическое и побитовое отрицание
# % - остаток от деления
# << >> побитовые сдвиги
# =, >=, <=
# ==, !=
# &, |, ^ побитовые и, или, исключающее или
# &&, || логические и, или
# операции через запятую
# expr?expr:expr
# поддержка восьми- и шестнадцатибитныз чисел(в формате с ведущим нулём)
# поддержка чисел в системах счисления с основанием от 2 до 64 (base#n)

Забудьте про posix $(()) и i=$(expr $i + 1)
Если вам нужно, в баше есть арифметический цикл for{{{for ((i=0; i<10; i++)); do echo $i; done}}}Вместо seq 1 10 в баше есть {1..10}

	= Дополнительно =
В баше есть такая штука
{{{ select choice in 'wipe ur disk' ' shutdown'; do ; done}}}

Не баш-специфичные, но, тем не менее, малоизвестные возможности
${name#|##|%|%%|,|,,|^|^^|/}
Следующие возможности (POSIX-совместимо):
 
*1. Использование значения по-умолчанию*
{{{${parameter:-default}}}}
Если parameter не существует или пуст, иначе будет использовано значение default. [если переменная не существовала, она не создаётся; если переменная была пуста, она пустой и остаётся]
 
*2. Присвоение значения по умолчанию*{{{${param:=default}}}}Если param не существует или пуст, создаётся соответствующая переменная/param присваивается default, иначе — используется значение param.
 
*3. Отобразить ошибку, если переменная не существует или пуста*{{{unset param
${param?}
bash: param: paramameter null or not set
${param?Забыли вы про param}
bash: param: Забыли вы про param
param='value'
echo ${param?}
value}}}
*4. Использовать альтернативное значение*{{{${param:+another value}}}}Если param не существует или пуста, ничего не будет подставлено, иначе будет подставлено another value
 
*5. Вывод подстроки*{{{${param:offset}
${param:offset:length}}}}Выводит подстроку начинающуюся с позиции offset длиной length, если длина не указана - до конца.
 
*6. префиксы*
*7. массивы*
*8. Длина строки*{{{${#param} #длина строки
${#*} #количество переданных параметров
${#@} #тоже самое
${#param} #param - массив ⇒ количество элементов}}}
*9. Удаление префикса*{{{${param#prefix} #удаление наименьшего соответсвия
${param##prefix} #удаление наибольшего соответствия
 
# пример
$ param='backup.tar.gz'
$ echo ${param}
backup.tar.gz
$ echo ${param#*.}
tar.gz
$ echo ${param##*.}
gz}}}
*10. Удаление суффикса*{{{${param%suffix} #удаление наименьшего постфикса
${param%%suffix} #наибольшего
 
# пример
$ echo ${param}
backup.tar.gz
$ echo ${param%.*}
backup.tar
$ echo ${param%%.*}
backup}}}
*11. Замена*{{{${param/pattern/string}  # обрабатывается только первое вхождение
${param//pattern/string} # обрабатываются все вхождения}}}
*12. Изменение регистра*{{{${param^pattern}
${param^^pattern}
${param,pattern}
${param,,pattern}}}}Изменяет регистр символа pattern, «^» - на верхний, «,» - на нижний. Если pattern отсутствует, изменяет регистр первого символа. «^^» и «,,» изменяет регистр всех символов совпадающих с pattern в строке. Если pattern пуст, изменяет регистр всех символов. Если param - массив, операция применяется ко всем элементам массива по очереди.

= Литература = 
1. man bash
2. <a href="http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html">Shell Command Language</a>
