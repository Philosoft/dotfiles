#!/usr/bin/env python
#*-* coding: utf-8 *-*

import pygtk
pygtk.require('2.0')
import gtk
import math

### Global definitions ###
a = 5.0
b = 20.0
c = 2.0
d = 3.0
alpha = 35 * math.pi / 180
Fb = 5.0
Fe = 20.0
vb = 0.01
ve = 0.2

def f1(x1, x2):
    return (x1 - Fb)

def f2(x1, x2):
    return (Fe - x1)

def f3(x1, x2):
    return (x2 - vb)

def f4(x1, x2):
    return (ve - x2)

def fi(x1, x2):
    return (min(0, f1(x1, x2)) + min(0, f2(x1, x2)))

def f0(x, y):
    return (((x - a)*math.cos(alpha) + (y - b) * math.sin(alpha))**2 / c**2 + ((y - b) * math.cos(alpha) + (x - a) * math.sin(alpha))**2 / d**2)

def outside_r_para(k, x1, x2, func = f0):
    return func(x1, x2) + k * (min(0, f1(x1, x2))**2 + min(0, f2(x1, x2))**2 + min(0, f3(x1, x2))**2 + min(0, f4(x1, x2))**2)
##################################

class App(gtk.Builder):
    def __init__(self):
        self.exec_method(None)

    def exec_method(self, widget):
        e1 = 0.001
        x1 = 1.0
        x2 = 1.0
        k = 1.0
        self.Method(x1, x2, k, e1, outside_r_para)

    def Method(self, x10, x20, K, e1, R):
        deltax = 0.0001
        h = 0.01
        steps = 1
        overallbuf = ''
        steper  = 0.01

        overallbuf += "Перед началом метода:\n"
        overallbuf += "x10 = " + str(x10) + "  x20 = " + str(x20) + '\n'
        overallbuf += "fi(x10, x20) = " + str(fi(x10, x20)) + "  R(1, x10, x20) = " + str(R(1, x10, x20)) + '\n'
        overallbuf += "f1(x10, x20) = " + str(f1(x10, x20)) + "\n"
        overallbuf += "f2(x10, x20) = " + str(f2(x10, x20)) + "\n"
        overallbuf += "==========\n"

        flag = True
        while flag:
            x1t = x10 #запоминаем текущую точку, после отработки метода Пауэлла она станет предыдущей
            x2t = x20
            dx1 = 1
            dx2 = 1
            while dx1 <> 0 or dx2 <> 0: #метод Пауэлла
                x1 = x10
                x2 = x20

                fx1 = R(K, x1, x2)
                fx2 = R(K, x1+steper, x2)
                if fx1 > fx2: #<
                    h = steper
                else:
                    h = -steper
                    fx2 = R(K, x1-steper, x2)

                x1 = x1 + h
                while fx1 > fx2: #<
                    fx1 = fx2
                    x1 = x1+h
                    fx2 = R(K, x1, x2)
                x1 = x1 - h

                fx1 = R(K, x1, x2)
                fx2 = R(K, x1, x2+steper)

                if fx1 > fx2: #<
                    h = steper
                else:
                    h = -steper
                    fx2 = R(K, x1, x2-steper)

                x2 = x2 + h
                while fx1 > fx2: #<
                    fx1 = fx2
                    x2 = x2 + h
                    fx2 = R(K, x1, x2)
                x2 = x2 - h
                #fx1 = fx2

                dx1 = x1 - x10
                dx2 = x2 - x20
                fx2 = R(K, x1+dx1, x2+dx2)

                x1 = x1 + dx1
                x2 = x2 + dx2

                while fx1 > fx2: #<
                    fx1 = fx2
                    x1 = x1 + dx1
                    x2 = x2 + dx2
                    fx2 = R(K, x1, x2)

                x10 = x1 - dx1
                x20 = x2 - dx2
            #пауэлл кончился
            overallbuf += "# " + str(steps) + ". При K = " + str(K) + " минимум функции равен:\n"
            overallbuf += "x1 = " + str(x10) + "  x2 = " + str(x20) + "  R(k, x10, x20) = " + str(fx2) + '\n'
            overallbuf += "fi(x10, x20) = " + str(fi(x10, x20)) + '\n'
            overallbuf += "f1(x10, x20) = " + str(f1(x10, x20)) + "\n"
            overallbuf += "f2(x10, x20) = " + str(f2(x10, x20)) + "\n"
            overallbuf += "==========\n"
            K = K*10.0 #увеличиваем к
            delta = abs(x1t - x10) + abs(x2t - x20) #точность
            steps += 1
            if delta <= e1:
                flag = False
        overallbuf += "fi(x1, x2) = " + str(fi(x10, x20)) + "  R(k, x1, x2) = " + str(R(K/10, x10, x20)) + '\n'
        print overallbuf

if __name__ == '__main__':
    a = App()
