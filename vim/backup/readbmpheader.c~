#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <stdint.h>

#pragma pack(push)
#pragma pack(1)
typedef struct tagBITMAPFILEHEADER
{
    uint8_t   bfType[2]; // TODO: know about padding in gcc
    uint32_t  bfSize;
    uint8_t   bfReserved1[2];
    uint8_t   bfReserved2[2];
    uint32_t  bfOffBits;
} BMPHEADER;
#pragma pack(pop)

typedef struct tagBITMAPINFOHEADER
{
    uint32_t biSize;
    uint32_t biWidth;
    uint32_t biHeight;
    uint16_t biPlanes;
    uint16_t biBitCount;
    uint32_t biCompression;
    uint32_t biSizeImage;
    uint32_t biXPelsPerMeter;
    uint32_t biYPelsPerMeter;
    uint32_t biClrUsed;
    uint32_t biClrImportant;
} BMPINFOHEADER;

int
main(int argc, char **argv)
{
    BMPHEADER bhead;
    BMPINFOHEADER bihead;
    FILE *f;

    bzero(&bhead, sizeof(bhead));
    bzero(&bihead, sizeof(bihead));
    f = fopen(argv[1], "rb");
    if(f == NULL)
    {
        perror("fopen(): ");
        exit(EXIT_FAILURE);
    }
    fread(&bfType, sizeof(bfType), 1, f);
    fread(&bhead, sizeof(bhead), 1, f);
    printf("=== BMP header ===\n");
    printf(" :: bfType      = %c%c (0x%x 0x%x)\n", bfType[0], bfType[1], bfType[0], bfType[1]);
    printf(" :: bfSize      = %i\n", bhead.bfSize);
    printf(" :: bfReserved1 = 0x%x 0x%x\n", bhead.bfReserved1[0], bhead.bfReserved1[1]);
    printf(" :: bfReserved2 = 0x%x 0x%x\n", bhead.bfReserved2[0], bhead.bfReserved2[1]);
    printf(" :: bfOffBits   = %i\n", bhead.bfOffBits);

    
    printf("\n");
    printf("=== BMP info header ===\n");
    fread(&bihead, sizeof(bihead), 1, f);
    printf(" :: Size          = %i\n", bihead.biSize);
    printf(" :: Width         = %i\n", bihead.biWidth);
    printf(" :: Height        = %i\n", bihead.biHeight);
    printf(" :: Planes        = %i\n", bihead.biPlanes);
    printf(" :: BitCount      = %i\n", bihead.biBitCount);
    printf(" :: Compression   = %i\n", bihead.biCompression);
    printf(" :: SizeImage     = %i\n", bihead.biSizeImage);
    printf(" :: XPelsPerMeter = %i\n", bihead.biXPelsPerMeter);
    printf(" :: YPelsPerMeter = %i\n", bihead.biYPelsPerMeter);
    printf(" :: ClrUsed       = %i\n", bihead.biClrUsed);
    printf(" :: ClrImportant  = %i\n", bihead.biClrImportant);
    fclose(f);

    exit(EXIT_SUCCESS);
}
