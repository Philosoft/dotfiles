#-*- coding: utf-8 -*-

import time
import re

"""
Логгер. Пишет в логи историю сообщений и jabber-presenses
"""

#{{{Атрибуты плагина
attrs = {
		"enabled":True, #Плагин активен
		"shared":True, #Это общий плагин. Через него будут проходить все сообщения
		"public":False, #Плагин не публиный и не виден никому, кроме админов (но может работать, если shared)
		"aliases":(u'лог',), #Список алиасов этого плагина
		"presence":True,
		}
#}}}

logDir = '/home/webmaster/www/jbot.derfenix.org/'

def init(bot = None):#{{{Инициализация плагина
	#Тут будут выполняться те действия,
	#которые нужны при загрузке плагина

	#Возвращаем параметры плагина
	return attrs
#}}}


def run(mess, bot):#{{{Обработка сообщений
	if mess.getType() == 'groupchat':
#		try:#Пытаемся записать в логи
		writeLogM(mess,bot)
#		except:#Не получилось
#			print 
#			print "Ошибка в плагине записи сообщения в лог", mess
#			print
#}}}

def runP(mess,bot):#{{{Обработка презенсов
	writeLogP(mess, bot)
#}}}

def writeLogM(mess, bot):#{{{Лог сообщения
	""" Формирует текст для логирования сообщения""" 
	
	#TODO: научиться отделять новые сообщения в конфе от присланной истории.
	
	messg = unicode(mess.getBody())

	ffrom = unicode(mess.getFrom()).split('/')
	timestamp = time.strftime("%H:%M:%S")
	try:
		messg = re.sub("\n","<br />\n", messg)	# TODO:Профиксить вылет при
												#смене топика в комнате
		messg = re.sub("<","&lt;", messg)
		messg = re.sub(">","&gt;", messg)
	except:
		return
	
	if re.search('/me', messg) != None:
		messg = re.sub('/me', '*' + ffrom[1], messg)
		messg = "<strong>%s</strong>"%messg
		WR = '''<div><span class="date">[%s]</span>&nbsp;&nbsp;<span class="red">%s</span></div>\n'''%(timestamp, messg)
	else:
		try:
			WR = '''<div><span class="date">[%s]</span>&nbsp;&nbsp;<strong>%s</strong>: %s</div>\n'''%(timestamp,ffrom[1], messg)
		except:
			return 
	
	writeLog(WR, ffrom)
#}}}

def writeLogP(mess,bot):#{{{Презенс-лог
	'''формирует строку для логирования презенса'''
	status = mess.getShow()
	if status == None:
		statuss = "is now online"
	if mess.getType() == 'unavailable':
		statuss = "leaves chatroom"
	if not status == None and mess.getType() != 'unavailable':
		statuss = 'is now %s'%status
	
	timestamp = time.strftime("%H:%M:%S")
	ffrom = unicode(mess.getFrom()).split('/')
	if ffrom[1] == bot.config.nick:
		return
	WR = '''<div><span class="date">[%s]</span>&nbsp;&nbsp;<span class="red">%s %s</span></div>\n'''%(timestamp, ffrom[1], statuss)
	writeLog(WR, ffrom)
#}}}

def writeLog(mess, ffrom, logs = False):#{{{Запись лога
	'''Записывает в лог сформированную строку'''
	import os
	global ghead
	
	if not logs:
		logs = logDir
	
	if not os.access(logs + ffrom[0],4):
		os.mkdir(logs + ffrom[0])
	
	ts = time.strftime("%Y-%m-%d").encode('utf-8')
	fn = logs + ffrom[0] + '/' + ts + '.html'
	
	# Если лог ещё не создан, то создадим файллог-файл с хэдером
	if not os.access(fn,4):
		head= """<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dt">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>%s - %s</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="stylesheet" href='../style.css' />
</head>
<body>
<h1>Логи конференции %s от %s</h1><hr />"""%(ffrom[0].encode('utf-8'), ts,ffrom[0].encode('utf-8'), ts)
		open(fn, 'w').write(head)
	
	try:
		open(fn, 'a').write(mess.encode('utf-8'))
	except:
		pass


