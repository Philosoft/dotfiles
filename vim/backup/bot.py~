#!/usr/bin/python 
# -*- coding: utf-8 -*-

import sys
import xmpp

#JID:  dead-bot@jabber.ru
#pass: ololo1

options = { 'JID': 'dead-bot@jabber.ru', 'Password': 'ololo1'}

commands = {}
i18n = { 'ru': {} , 'en': {} }

### user handlers start ###
i18n['en']['HELP'] = "Thisis is simplest jabber bot ever.\n Available commands: %s"
def helpHandler(user, command, args, msg):
  lst = commands.keys()
  lst.sort()
  return "HELP", ', '.join(lst)

i18n['en']['EMPTY'] = "%s"
i18n['en']['HOOK1'] = 'Responce 1: %s'
def hook1Handler(user, command, args, mess):
  return "HOOK1", 'U requested: %s'%args
### user handlers stop  ###

### bot logic start ###
i18n['en']["UNKNOWN COMMAND"] = 'Unknown command "%s". Try "help"'
i18n['en']["UNKNOWN USER"] = "I do not know u. Register first."
def messageCB(conn, msg):
  text = msg.getBody()
  user = msg.getFrom()
  user.lang = 'en'

  if text.find(' ') + 1:
    command, args = text.split(' ', 1)
  else:
    command, args = text, ''

  cmd = command.lower()

  if commands.has_key(cmd):
    reply = commands[cmd](user, command, args, msg)
  else:
    reply = ("UNKNOWN COMMAND", cmd)

  if type(reply) == type(()):
    key, args = reply
    if i18n[user.lang].has_key(key):
      pat = i18n[user.lang][key]
    elif i18n['en'].has_key(key):
      pat = i18n['en'][key]
    else:
      pat = "%s"

    if type(pat) == type(''):
      reply = pat%args
    else:
      reply = pat(**args)
  else:
    try:
      reply = i18n[user.lang][reply]
    except KeyError:
      try:
        reply = i18n['en'][reply]
      except KeyError:
        pass

  if reply:
    conn.send(xmpp.Message(msg.getFrom(), reply))

for i in globals().keys():
  if i[-7:] == 'Handler' and i[:-7].lower() == i[:-7]:
    commands[i[:-7]] = globals()[i]
### bot logic stop  ###

def StepOn(conn):
  try:
    conn.Process(1)
  except KeyboardInterrupt:
    return 0

  return 1

def GoOn(conn):
  while StepOn(conn): pass

jid = xmpp.JID(options['JID'])
user, server, password = jid.getNode(), jid.getDomain(), options['Password']

conn = xmpp.Client(server, debug = [])
result = conn.connect()
if not result:
  print "Unable to connecnt to server %s."%server
  sys.exit(1)
if result <> 'tls':
  print "WARNING: unable to establish secure connection - TLS failed"

authresult = conn.auth(user, password)
if not authresult:
  print "Unable to authrize on %s - check login/password"%server
  sys.exit(1)
if authresult <> 'sasl':
  print "WARNING:  unable  to perform SASL auth on %s. Old authetication method used."%server

conn.RegisterHandler('message', messageCB)
conn.sendInitPresence()
GoOn(conn)
