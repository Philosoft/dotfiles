#!/usr/bin/python
# -*- coding: utf-8 -*-

import pygtk
pygtk.require('2.0')
import gtk
from math import sqrt
from math import e

from matplotlib.figure import Figure
from matplotlib.backends.backend_gtkagg import FigureCanvasGTKAgg as FigureCanvas
from matplotlib.backends.backend_gtkagg import NavigationToolbar2GTKAgg as NavigationToolbar
from numpy import pi, cos
from math import exp
from matplotlib import interactive

interactive(True)

l1 = 0.1885
l2 = 0.5771
M0 = 15.0
sig0 = 12.0
#al0 = 0.16
al0 = 0.1

buf = ''
k_list = []
z_list = []
kz_list = []
glob_kz_list = []
final_alz = 0.0

def func(k, X, sig, A1, A2):
    Ns = 10
    res = 0.0

    i = k
    while i < Ns + k + 1:
        res = res + (X[i]*sqrt(sig0/(sig*al0*A1))*A2*pow(2.71, -A2*al0*(i-k)))
        i += 1
    res = res*1.0/Ns + M0

    return res


def Kz(alz, S, sigz):
    return sigz * pow(e, -alz * S)


def approx(alz, sigz, K):
    res = 0.0
    for i in range(8):
        k0 = 0.0
        k0 = Kz(alz, i, sigz)
        res += abs(K[i] - k0)
    return res


def v(Z, X, A1, A2, sigx, K):
    global buf
    res = range(6)

    Mz   = 0.0
    sigz = 0.0
    alz  = 0.0
    rs   = 0.0
    del_ = 0.0
    del0 = 0.0
    step = 0.01
    count = 200

    for i in range(count):
        Z[i] = func(i, X, sigx, A1, A2)

    Mz = 0.0
    for i in range(count):
        Mz += Z[i]
    Mz/= (count)
    sigz = 0
    for i in range(count):
        sigz+= pow((Z[i] - Mz), 2.0)
    sigz /= (count)

    for i in range(20):
        K[i] = 0.0
        for j in range(count - i):
            K[i] += (Z[j] - Mz) * (Z[i + j] - Mz)
        K[i] /= (count - i)
        #i += 1

    alz = 0.0
    del_ = approx(alz, sigz,  K)
    del0 = approx(alz + step, sigz, K)

    if del0 > del_:
        step = -step
        del0 = approx(alz + step, sigz, K)

    while del0 < del_:
        del_ = del0
        alz += step
        del0 = approx(alz + step, sigz, K)

    res[0] = Mz
    res[1] = sigz
    res[2] = alz
    res[3] = abs(Mz - M0) / M0
    res[4] = abs(sigz - sig0) / sig0
    res[5] = abs(alz - al0) / al0

    return res


def run():
    global buf
    count = 200
    e1 = 0.0
    e2 = 0.0
    e3 = 0.0
    e4 = 0.0
    res = range(6)
    X = range(count+10)
    Z = range(count)
    K = range(20)

    rs    = 0.0
    rs0   = 0.0
    Mx    = 0.0
    sigx  = 0.0
    Mz    = 0.0
    sigz  = 0.0
    alz   = 0.0
    step  = 0.01
    A1 = 1.0
    A2 = 1.0

    global l1, l2
    l3 = l1 * l2
    X[0] = float('0.' + str(l3 * 100).split('.')[1][:4])
    X[0] = X[0] - 0.5
    #buf += 'i = %3i\tx = %2.4f\n' %(0, X[0])
    l1 = l2
    l2 = l3

    i = 1
    while i < count + 10:
        l3 = float('0.' + str(l1 * l2 * 100).split('.')[1][:4])
        X[i] = l3
        X[i] = X[i] - 0.5
        l1 = l2
        l2 = l3
        #buf += 'i = %3i\tx = %2.4f\n' %(i, X[i])
        i += 1

    Mx = 0.0
    for i in range(count):
        Mx+= X[i]
    Mx/= count
    sigx = 0
    for i in range(count):
        sigx+= pow((X[i] - Mx), 2.0)
    sigx/= count

    flag = True
    while flag:
        print 'Mx =', Mx
        res = v(Z, X, A1, A2, sigx, K)
        Mz = res[0]
        sigz = res[1]
        rs = res[4]
        alz = res[2]
        res = v(Z, X, A1+step, A2, sigx, K)
        rs0 = res[4]

        if(rs0 > rs):
            step = -step
            res = v(Z, X, A1+step, A2, sigx, K)
            rs0 = res[4]

        while(rs0 < rs):
            rs = rs0
            A1 += step
            Mz = res[0]
            sigz = res[1]
            alz = res[2]
            res = v(Z, X, A1+step, A2, sigx, K)
            rs0 = res[4]

        res = v(Z, X, A1, A2, sigx, K)
        Mz = res[0]
        sigz = res[1]
        rs = res[5]
        alz = res[2]
        res = v(Z, X, A1, A2+step, sigx, K)
        rs0 = res[5]

        if(rs0 > rs):
            step = -step
            res = v(Z, X, A1, A2+step, sigx, K)
            rs0 = res[5]

        while(rs0 < rs):
            rs = rs0
            A2 += step
            Mz = res[0]
            sigz = res[1]
            alz = res[2]
            res = v(Z, X, A1, A2+step, sigx, K)
            rs0 = res[5]

        #buf += 'M0 = %2.4f\tMz = %2.4f\n' %(M0, Mz)
        #buf += 'sig0 = %2.4f\tsigz = %2.4f\n' %(sig0, sigz)
        #print 'al0 = %2.4f\talz = %2.4f\n' %(al0, alz)
        e2 = (abs(sig0 - sigz)/sig0) * 100.0
        e3 = (abs(al0 - alz)/al0) * 100.0
        print u'Î± =', alz
        if (e2 > 10.0) or (e3 > 30.0):
            pass
        else:
            flag = False
    res = v(Z, X, A1, A2, sigx, K)
    Mz = res[0]
    sigz = res[1]
    alz = res[2]

    for i in range(count):
        buf += 'i = %3i\tz = %2.4f\n' %(i, Z[i])
        z_list.append(Z[i])

    for i in range(8):
        #buf += 'i = %3i\tk = %2.5f\n' %(i, K[i])
        k_list.append(K[i])
    global final_alz
    final_alz = res[3]

    i = 0.0
    global glob_kz_list
    while i < 8.1:
        glob_kz_list.append(Kz(alz, i, sigz))
        i += 0.1

    buf += 'M  = %2.4f\tM0  = %2.4f\n' %(Mz, M0)
    buf += 'sigma = %2.4f\tsigma0 = %2.4f\n' %(sigz, sig0)
    buf += 'alpha = %2.4f\talpha0 = %2.4f\n' %(alz, al0)

class App(gtk.Builder):
    def __init__(self):
        super(App, self).__init__()
        self.add_from_file('gui.ui')
        self.connect_signals(self)
        self.window1.connect('destroy', lambda x: gtk.main_quit())

        self.tbuf = self.textview1.get_buffer()
        global buf
        self.tbuf.set_text(buf)

        self.fig = Figure(figsize = (5,4), dpi = 100)
        self.canvas = FigureCanvas(self.fig)
        self.vbox1.pack_start(self.canvas)
        self.toolbar = NavigationToolbar(self.canvas, self.window1)
        self.vbox1.pack_start(self.toolbar, False, False)

        self.ax = self.fig.add_subplot(111)
        self.ax.plot(range(len(z_list)), z_list)
        self.ax.grid()
        self.fig.canvas.draw()

        self.fig2 = Figure(figsize = (5,4), dpi = 100)
        self.canvas2 = FigureCanvas(self.fig2)
        self.vbox2.pack_start(self.canvas2)
        self.toolbar2 = NavigationToolbar(self.canvas2, self.window1)
        self.vbox2.pack_start(self.toolbar2, False, False)

        self.ax2 = self.fig2.add_subplot(111)
        self.ax2.grid()
        self.ax2.scatter(range(len(k_list)), k_list)
#        self.ax2.plot(range(len(k_list)), map(lambda x: Kz(final_alz, x), range(20)))
        i = 0.0
        i_list = []
        while i < 8.1:
            i_list.append(i)
            i += 0.1
        self.ax2.plot(i_list, glob_kz_list)
        self.fig2.canvas.draw()

        self.window1.show_all()
        gtk.main()

    def __getattr__(self, attr):
        obj = self.get_object(attr)
        if not obj:
            raise AttributeError('There are no such attr as `' + attr + '\'')
        setattr(self, attr, obj)
        return obj

run()
App()
