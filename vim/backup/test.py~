#!/usr/bin/python2
# -*- coding: utf-8 -*-

from math import factorial as fact
import sys
import pygame as pg

pg.init()

size = width, height = 640, 480
speed = [2, 2]
black = 0, 0, 0

screen = pg.display.set_mode(size)

### Global {{{
points_list = []
mode_list = [u'1: Лагранж', u'2: Безье', u'3: Б-сплайн']
current_mode = 0
### }}}

def lagranj(points):
    pts = []
    last_x, last_y = points[0]
    pts.append( (last_x, last_y) )

    x = points[0][0]
    while x + 1 <= points[-1][0]:
        y = 0
        for i in xrange(len(points)):
            lj = 1
            for j in xrange(len(points)):
                if i != j:
                    lj *= float((x - points[j][0])) / float(points[i][0] - points[j][0])
            y += points[i][1] * lj
        pts.append( (x, y) )
        last_x, last_y = x, y
        x += 1

    return pts

def bezieur(points):
    pts = []
    delta_t = 0.1
    t = 0
    while t <= 1:
        x = y = 0
        m = len(points)
        for i in range(len(points)):
            x += fact(m-1) / (fact(i) * fact(m-1 - i) ) * t**(i) * (1 - t)**(m-1 - i) * points[i][0]
            y += fact(m-1) / (fact(i) * fact(m-1 - i) ) * t**(i) * (1 - t)**(m-1 - i) * points[i][1]
        pts.append( (x, y) )
        t += delta_t

    return pts

def b_splain(points):
    length = len(points)
    if length < 4:
        return [(0, 0), (1, 0)]
    elif length % 4 == 3 or length == 4:
        t = 0
        pts = []
        x1, y1 = points[0]
        x2, y2 = points[1]
        x3, y3 = points[2]
        x4, y4 = points[3]
        while t <= 1:
            x = (1 - t)**3 * x1 + 3*t*(t - 1)**2*x2 + 3*t**2*(1 - t)*x3 + t**3*x4
            y = (1 - t)**3 * y1 + 3*t*(t - 1)**2*y2 + 3*t**2*(1 - t)*y3 + t**3*y4
            pts.append( (x, y) )
            t += 0.01

        return pts

def hermit(points):
    pts = []

def change_title(title):
    #remove all but text
    screen.fill((0, 0, 0))
    if len(points_list):
        redraw_points()
        if len(points_list) > 1:
            redraw_curve()
    font = pg.font.Font(None, 17)
    text = font.render(title, True, (255, 255, 255))
    textRect = text.get_rect()
    textRect.centerx = screen.get_rect().centerx
    textRect.centery = 17
    screen.blit(text, textRect)

def next_mode():
    global current_mode
    if current_mode < len(mode_list) - 1:
        current_mode += 1
    else:
        current_mode = 0
    change_title(mode_list[current_mode])

def prev_mode():
    global current_mode
    if current_mode > 0:
        current_mode -= 1
    elif current_mode == 0:
        current_mode = len(mode_list) - 1
    change_title(mode_list[current_mode])


def redraw_all():
    screen.fill((0,0,0))
    if len(points_list):
        redraw_points()
        if len(points_list) > 1:
            redraw_curve()
    change_title(mode_list[current_mode])

def do_job(mode):
    if mode == 0:
        pg.draw.lines(screen, (0, 255, 0), False, lagranj(points_list), 1)
    elif mode == 1:
        pg.draw.lines(screen, (0, 255, 0), False, bezieur(points_list), 1)
    elif mode == 2:
        pg.draw.lines(screen, (0, 255, 0), False, b_splain(points_list), 1)

def redraw_points():
    screen.fill((0, 0, 0))
    for i in points_list:
        pg.draw.circle(screen, (255, 50, 50), i, 5, 0)

def redraw_curve():
    do_job(current_mode)


### global flags {
moving = False
old_val = ''
### }
change_title(u'1: Лагранж')
while 1:
    for event in pg.event.get():
        if event.type == pg.QUIT: sys.exit()

        elif event.type == pg.KEYDOWN:
            if event.key == pg.K_r:
                points_list = []
                change_title(mode_list[current_mode])
            if event.key == pg.K_SPACE:
                next_mode()
            if event.key == pg.K_LCTRL:
                prev_mode()

        elif event.type == pg.MOUSEBUTTONDOWN:
            if event.button == 1:
                x, y = event.pos
                if not moving:
                    # проверим, не тыкнули ли мы в точку
                    for i in points_list:
                        if (x > i[0] - 5 and x < i[0] + 5) and (y > i[1] - 5 and y < i[1] + 5):
                            moving = True
                            old_val = i

                    if not moving:
                        points_list.append( (x, y) )
                        pg.draw.circle(screen, (255, 50, 50), (x, y), 5, 0)
            if event.button == 3:
                redraw_all()
                do_job(current_mode)

        elif event.type == pg.MOUSEBUTTONUP:
            if moving:
                moving = False

                index = points_list.index(old_val)
                points_list.remove(old_val)
                points_list.insert(index, event.pos)
                pg.draw.circle(screen, (0, 0, 0), old_val, 10, 0)
                pg.draw.circle(screen, (255, 50, 50), event.pos, 5, 0)

    pg.display.flip()
