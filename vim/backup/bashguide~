Для начала оговоримся, что  мы имеем дело именно с башем — со скриптами под свои нужды, автоматизацией рутинных действий и т.п. никаких загрузочных скриптов и прочего restricted posix shell.
 
<ul>
<li>Больше про арифметику</li>
<li>Больше про сравнения</li>
<li>Добавить примеров</li>
<li>Внешний вид</li>
<li>Вычитка</li>
<li>Встроенные команды</li>
<li>restricted shell</li>
<li>coproc</li>
<li>select</li>
</ul>
<h3>Сравнения</h3><code lang="bash">if [[ условие ]]; then</code>Особенности этой конструкции в баше:
0. [[ встроенная команда, в отличие от [
1. внутри [[ ]] не действует «разбиение на слова» ⇒ мы спокойно можем использовать переменные без «заковычивания», если в строке есть пробел, ничего страшного не случится.
2. спецсимволы *, ? и [ воспринимаются как обычные символы (никакого глобинга)
3. всё остальное действует
<h3>Арифметика</h3><code lang="bash">let i=0
let i++
let i--
let i=10*20
let i**2 #возведение в степень</code>Кроме того
<ul>
<li>унарные - и +</li>
<li>++var, --var</li>
<li>var++, var--</li>
<li>! и ~ логическое и побитовое отрицание</li>
<li>% - остаток от деления</li>
<li><< >> побитовые сдвиги</li>
<li>=, >=, <=</li>
<li>==, !=</li>
<li>&, |, ^ побитовые и, или, исключающее или</li>
<li>&&, || логические и, или</li>
<li>операции через запятую<li>
<li>expr?expr:expr</li>
<li>поддержка восьми- и шестнадцатибитныз чисел(в формате с ведущим нулём)</li>
<li>поддержка чисел в системах счисления с основанием от 2 до 64 (base#n)<li>
</ul>

Забудьте про posix $(()) и i=$(expr $i + 1)
Если вам нужно, в баше есть арифметический цикл for<code lang="bash">for ((i=0; i<10; i++)); do echo $i; done</code>Вместо seq 1 10 в баше есть {1..10}<h3>Дополнительно</h3>В баше есть такая штука
<code lang="bash"> select choice in 'wipe ur disk' ' shutdown'; do ; done</code>Не баш-специфичные, но, тем не менее, малоизвестные возможности
${name#|##|%|%%|,|,,|^|^^|/}
Следующие возможности (POSIX-совместимо):
 
<b>1. Использование значения по-умолчанию</b><code lang="bash">${parameter:-default}</code>Если parameter не существует или пуст, иначе будет использовано значение default. [если переменная не существовала, она не создаётся; если переменная была пуста, она пустой и остаётся]
 
<b>2. Присвоение значения по умолчанию</b><code lang="bash">${param:=default}</code>Если param не существует или пуст, создаётся соответствующая переменная/param присваивается default, иначе — используется значение param.
 
<b>3. Отобразить ошибку, если переменная не существует или пуста</b><code lang="bash">unset param
${param?}
bash: param: paramameter null or not set
${param?Забыли вы про param}
bash: param: Забыли вы про param
param='value'
echo ${param?}
value</code>
<b>4. Использовать альтернативное значение</b><code lang="bash">${param:+another value}</code>Если param не существует или пуста, ничего не будет подставлено, иначе будет подставлено another value
 
<b>5. Вывод подстроки</b><code lang="bash">${param:offset}
${param:offset:length}</code>Выводит подстроку начинающуюся с позиции offset длиной length, если длина не указана - до конца.
 
<b>6. префиксы</b>
<b>7. массивы</b>
<b>8. Длина строки</b><code lang="bash">${#param} #длина строки
${#*} #количество переданных параметров
${#@} #тоже самое
${#param} #param - массив ⇒ количество элементов</code>
<b>9. Удаление префикса</b><code lang="bash">${param#prefix} #удаление наименьшего соответсвия
${param##prefix} #удаление наибольшего соответствия
 
# пример
$ param='backup.tar.gz'
$ echo ${param}
backup.tar.gz
$ echo ${param#*.}
tar.gz
$ echo ${param##*.}
gz</code>
<b>10. Удаление суффикса</b><code lang="bash">${param%suffix} #удаление наименьшего постфикса
${param%%suffix} #наибольшего
 
# пример
$ echo ${param}
backup.tar.gz
$ echo ${param%.*}
backup.tar
$ echo ${param%%.*}
backup</code>
<b>11. Замена</b><code lang="bash">${param/pattern/string}  # обрабатывается только первое вхождение
${param//pattern/string} # обрабатываются все вхождения</code>
<b>12. Изменение регистра</b><code lang="bash">${param^pattern}
${param^^pattern}
${param,pattern}
${param,,pattern}</code>Изменяет регистр символа pattern, «^» - на верхний, «,» - на нижний. Если pattern отсутствует, изменяет регистр первого символа. «^^» и «,,» изменяет регистр всех символов совпадающих с pattern в строке. Если pattern пуст, изменяет регистр всех символов. Если param - массив, операция применяется ко всем элементам массива по очереди.
<h3>Литература</h3> 
1. man bash
2. <a href="http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html">Shell Command Language</a>
