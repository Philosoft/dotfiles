# coding: utf-8

from Tkinter import *
import tkFont
from ScrolledText import ScrolledText
from math import sqrt, pi

import alpha_n

# значения в кгс/м^2
area_W0 = {
    'Ia': 17,
    'I': 23,
    'II': 30,
    'III': 38,
    'IV': 48,
    'V': 60,
    'VI': 73,
    'VII': 85
}

k_table = {
	5:   {'A': 0.75, 'B': 0.5,  'C': 0.4},
	10:  {'A': 1.0,  'B': 0.65, 'C': 0.4},
	20:  {'A': 1.25, 'B': 0.85, 'C': 0.55},
	40:  {'A': 1.5,  'B': 1.1,  'C': 0.8},
	60:  {'A': 1.7,  'B': 1.3,  'C': 1.0},
	80:  {'A': 1.85, 'B': 1.45, 'C': 1.15},
	100: {'A': 2.0,  'B': 1.6,  'C': 1.25},
	150: {'A': 2.25, 'B': 1.9,  'C': 1.55},
	200: {'A': 2.45, 'B': 2.1,  'C': 1.8},
	250: {'A': 2.65, 'B': 2.3,  'C': 2.0},
	300: {'A': 2.75, 'B': 2.5,  'C': 2.2},
	350: {'A': 2.75, 'B': 2.75, 'C': 2.35},
	480: {'A': 2.75, 'B': 2.75, 'C': 2.75}
}

ksi_table = {
	5:   {'A': 0.85, 'B': 0.5,  'C': 0.4},
	10:  {'A': 0.76,  'B': 0.65, 'C': 0.4},
	20:  {'A': 0.69, 'B': 0.85, 'C': 0.55},
	40:  {'A': 0.62,  'B': 1.1,  'C': 0.8},
	60:  {'A': 0.58,  'B': 1.3,  'C': 1.0},
	80:  {'A': 0.56, 'B': 1.45, 'C': 1.15},
	100: {'A': 0.54,  'B': 1.6,  'C': 1.25},
	150: {'A': 0.51, 'B': 1.9,  'C': 1.55},
	200: {'A': 0.49, 'B': 2.1,  'C': 1.8},
	250: {'A': 0.47, 'B': 2.3,  'C': 2.0},
	300: {'A': 0.46, 'B': 2.5,  'C': 2.2},
	350: {'A': 0.46, 'B': 2.75, 'C': 2.35},
	480: {'A': 0.46, 'B': 2.75, 'C': 2.75}
}

nu_table = {
    #P, m   'X': nu, 'X': nu 
    #it's
    # p, m | X
    # 0.1  | 5
    #      ---
    #      |nu = 0.95
    0.1: {5: 0.95, 10: 0.92, 20: 0.88, 40: 0.83, 80: 0.76, 160: 0.67, 350: 0.56},
	5:   {5: 0.89, 10: 0.87, 20: 0.84, 40: 0.80, 80: 0.73, 160: 0.65, 350: 0.54},
	10:  {5: 0.85, 10: 0.84, 20: 0.81, 40: 0.77, 80: 0.71, 160: 0.64, 350: 0.53},
	20:  {5: 0.80, 10: 0.78, 20: 0.76, 40: 0.73, 80: 0.68, 160: 0.61, 350: 0.51},
	40:  {5: 0.72, 10: 0.72, 20: 0.70, 40: 0.67, 80: 0.63, 160: 0.57, 350: 0.48},
	80:  {5: 0.63, 10: 0.63, 20: 0.61, 40: 0.59, 80: 0.56, 160: 0.51, 350: 0.44},
	160: {5: 0.53, 10: 0.53, 20: 0.52, 40: 0.50, 80: 0.47, 160: 0.44, 350: 0.38}
}

f1_table = {
    ''' СНиП 2.01.07-85 п. 6.8 '''
    # ветровой район | delta = 0.3 | delta = 0.15
    'I':   {0.3: 0.85, 0.15: 2.6},
    'Ia':  {0.3: 0.95, 0.15: 2.9},
    'II':  {0.3: 1.1,  0.15: 3.4},
    'III': {0.3: 1.2,  0.15: 3.8},
    'IV':  {0.3: 1.4,  0.15: 4.3},
    'V':   {0.3: 1.6,  0.15: 5.0},
    'VI':  {0.3: 1.7,  0.15: 5.6},
    'VII': {0.3: 1.9,  0.15: 5.9}
}

def choose_k(height, type):
	k = 0.0
	try:
		return k_table[height][type]
	except KeyError:
		left = right = 0
		height_list = k_table.keys()
		height_list.sort()
		if height <= height_list[0]:
			pos = height_list[0]
		elif height >= height_list[-1]:
			pos = height_list[-1]
		else:
			for i in height_list:
				if height > i:
					left = i
				else:
					right = i
					break
			delta_left = abs(left - height)
			delta_right = abs(right - height)
			if delta_left < delta_right:
				pos = left
			else:
				pos = right
		return k_table[pos][type]

def choose_ksi(height, type):
	k = 0.0
	try:
		return ksi_table[height][type]
	except KeyError:
		left = right = 0
		height_list = ksi_table.keys()
		height_list.sort()
		if height <= height_list[0]:
			pos = height_list[0]
		elif height >= height_list[-1]:
			pos = height_list[-1]
		else:
			for i in height_list:
				if height > i:
					left = i
				else:
					right = i
					break
			delta_left = abs(left - height)
			delta_right = abs(right - height)
			if delta_left < delta_right:
				pos = left
			else:
				pos = right
		return ksi_table[pos][type]

def choose_nu(p, X):
    '''СНиП 2.01.07-85 п 6.9, таб 9 и 10'''
    #FIXME
    return 0.82

def myprint(txt):
    field.insert(END, txt + '\n')

tk = Tk()
tk.wm_title(u"Расчёт ветровой нагрузки")
fnt = tkFont.Font(size=10)

frames = {}
buttons = {}
entrys = {}
labels = {}

frames[True] = Frame(tk, width=250, height=250)
frames[True].pack(side=LEFT, fill=BOTH)
frames[False] = Frame(tk, width=250, height=250)
frames[False].pack(side=RIGHT, fill=BOTH)

field = ScrolledText(frames[False], width = 60, font = fnt)
field.pack(side=RIGHT, fill=BOTH)

labels[1] = Label(frames[True], text=u"Ветровой район").place(relx=0.04, rely=0.03, anchor=NW)
HEIGHT_RELY=0.24
labels[2] = Label(frames[True], text=u"Высота").place(relx=0.04, rely=HEIGHT_RELY, anchor=NW)
entry_height = Entry(frames[True], takefocus=True, borderwidth=1, textvariable = StringVar(None, 2), width=15)
entry_height.place(relx = 0.24, rely=HEIGHT_RELY, anchor = NW)

wind_areas = Listbox(frames[True], height = 3)
s = Scrollbar(frames[True], orient=VERTICAL, command=wind_areas.yview)
AREAS_RELY = 0.08
s.place(relx = 0.54, rely = AREAS_RELY)
wind_areas['yscrollcommand'] = s.set
wind_areas.place(relx=0.04, rely=AREAS_RELY, anchor=NW)
possible_wind_areas = ['I', 'Ia', 'II', 'III', 'IV', 'V', 'VI', 'VII']
for item in possible_wind_areas:
    wind_areas.insert(END, item)
wind_areas.select_set(0)

h_label = Label(frames[True], text=u"Высота щита, м").place(relx=0.04, rely=0.3)
w_label = Label(frames[True], text=u"Ширина щита, м").place(relx=0.04, rely=0.35)
h_entry = Entry(frames[True], takefocus=False, borderwidth=1, textvariable = StringVar(None, 6.18), width=15)
w_entry = Entry(frames[True], takefocus=False, borderwidth=1, textvariable = StringVar(None, 3.18), width=15)
h_entry.place(relx = 0.44, rely=0.3)
w_entry.place(relx = 0.44, rely=0.35)

def btn_run_click_cb():
	field.delete('1.0', END)
	run()
button_run = Button(frames[True], text=u"Расчёт", command=btn_run_click_cb)
button_run.place(relx=0.3, rely=0.80)


def print_text(str):
    print str

def run():
	# defaults {
	## табличные данные {
	ro = 7850 # плотность стали [кг/м^2]
	## }

	## будущие задаваемые значения{
	wind_area = possible_wind_areas[int(wind_areas.curselection()[0])]
	# задаваемое значение (разрешённый на пока диспозон 2 - 10 м)
	height = float(entry_height.get())
	l = 3.765 # рабочая длина стойки = L + height / 2 [м],
			  # где L - расстояние от земли до низа щита
			  # TODO: пересчитать
	L = 3.35
	l = L + height / 2.0
	D = 325 * 10 ** (-3) # диаметр трубы # D и s выбираются в зависимости от типа трубы
	s = 8 * 10 ** (-3) # толщина стенки
	M = 1055 # масса рекламного щита [кг] # считается в зависимости от размеров 
	## }

	## СНиП [1] {
	#### TODO: таблицы для выбора коэффициентов
	W0 = area_W0[wind_area]
	k = choose_k(height, 'A') #FIXME: dyn type
	c = 1.4 #FIXME c п 6.6, приложение 4 
	# TODO типы местности (для коэф к) на гуйню, мб разный с разных сторон [1] п. 6.5
	#      коэффициент c, п 6.6, приложение 4
	## }
	# }

	myprint('Ветровой район %s, высота стойки %iм' %(wind_area, height))
	myprint('\-труба: ф325х8')
	myprint('= Геометрические характеристики =')
	myprint('Площадь:')
	A = pi / 4 * (D**2 - (D - 2*s)**2)
	myprint('  A = %f м^2' %(A))
	myprint('Момент инерции при изгибе:')
	Jx = Jy = (pi / 64.0) * (D**4 - (D - 2*s)**4)
	myprint('  Jx = Jy = %10.10f м^4' %(Jx))
	Wx = Wy = 2.0 * Jx / D
	myprint('  Wx = Wy = %f м^3' %(Wx))
	Jp = Jx / 2.0
	myprint('  Jp = %f м^3' %(Jp))
	ix = iy = sqrt(Jx / A)
	myprint('  ix = iy = %f м' %(ix))

	myprint('погонная масса:')
	m = ro * A
	myprint('  m = ro * A = %f кг/м' %(m))

	Wm = W0 * k * c
	myprint('Wm = W0 * k * c = %f кг/м^2' %(Wm))
	myprint('Считаем безразмерный параметр n:')
	n = M / m / l
	myprint('  n = %f' %(n))
	myprint('Выбираем alpha:')
	alpha = alpha_n.choose_alpha(n)
	myprint('  alpha = %f' %(alpha))
	myprint('Считаем первую частоту собственных колебаний:')
	E = 45388 # TODO: что это?
	f1 = 1.0 / 2.0 / pi * alpha**2 / l**2 * sqrt(E**2 * Jx / m)
	#print '  f1 = %f / (%f * %f) * (%f / %f) * sqrt( %f * %f / %f)' %(1.0, 2.0, pi, alpha, l, E, Jx, m)
	myprint('  f1 = %f' %(f1))

	# TODO: здесь выбор fl в зависимости от 
	fl = 2.9
	if f1 > fl:
		# TODO: табличка для выбора кси
		def foo(wm, ksi, nu):
			return wm * ksi * nu
		wm = foo
	else:
		# TODO: hi в зависимости от эпсилон и дельта
		def foo(wm, ksi, hi, nu):
			return wm * ksi * nu * hi
		wm = foo
	# для III района
	# W = (Wm + Wp) * gamma_f * gamma_n
	W = (Wm / 100.0 + 30.53) * 1.4 * 0.9 #FIXME: Wm / 100
	# F - расчётная ветровая поверхность
	F = 3.35 * 6.18
	myprint(u'Расчётная ветровая поверхность: %2.4f м^2' %(F))
	Pw = W * F
	myprint(u'Нагрузка на щит от давления ветра: %2.4f кгс/м^2' %(Pw))


tk.mainloop()


# оптимизации будущего
# одна функция л=для выбора k и ksi
# возможно таблички можно реализовать более логично - 
#   чтобы не повторять названия столбоц тыщу раз например
