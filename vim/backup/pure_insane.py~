#!/usr/bin/python3

var_replacement = []
rules = []

with open("simptoms.txt") as f:
	for line in f:
		orig, var_name = line.split(" ")
		var_name = var_name.replace("\r", "")
		var_name = var_name.replace("\n", "")
		var_replacement.append( (orig, var_name) )

code ="""#!/usr/bin/python3

from gi.repository import Gtk

"""

for _, v in var_replacement:
	code += "{0} = False\n".format(v)

code += "\nvar_replacement = " + str(eval('var_replacement')) + "\n"

with open("insane.txt") as f:
	for rule in f:
		rule = rule.replace("ЕСЛИ ", "if ")
		rule = rule.replace(" ТО ", " : ")
		rule = rule.replace(" И ", " and ")
		rule = rule.replace(" да ", " ")
		rule = rule.replace(" == ", " ")
		rule = rule.replace(" болезнь ", " DIAGNOSE ")

		for s, v in var_replacement:
			rule = rule.replace(s, v)

		rules.append(rule)

code +="""
diagnosises = {
"""

with open("rules.txt") as f:
	for line in f:
		d = line.split(' болезнь = ')[-1].replace('"', '').replace('\r', '').replace('\n', '')
		sms = line.split(' болезнь = ')[0]
		sms = sms.replace(" ТО", "")
		sms = sms.replace("ЕСЛИ ", "")
		sms = sms.replace(" == да", "")
		sms = sms.split(" И ")
		code += "'" + d + '\': """На основании наличия следующих симптомов:\n'
		for s in sms:
			code += "  * " + s.replace('_', ' ') + ";\n"
		code += "Поставлен диагноз: " + d.replace('_', ' ') + '""",\n\n'

code += "'': 'диагноза нет'"
code += """}
"""

code += "symptoms = [\n"
with open("rules.txt") as f:
	for line in f:
		sms = line.split(' болезнь = ')[0]
		sms = line.split(' болезнь = ')[0]
		sms = sms.replace(" ТО", "")
		sms = sms.replace("ЕСЛИ ", "")
		sms = sms.replace(" == да", "")
		sms = sms.split(" И ")
		code += "  [\n"
		for s in sms:
			code += '    "' + s.replace('_', ' ') + '",\n'

		code += "  ],\n"

code += "\n]\n\n"

code += """class MyDialog(Gtk.Dialog):
	def __init__(self, parent, l):
		Gtk.Dialog.__init__(self, "Уточнение симптомов", parent, 0, (Gtk.STOCK_OK, Gtk.ResponseType.OK, Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL))

		self.set_default_size(150, 100)
		self.label = Gtk.Label(l)
		self.box = self.get_content_area()
		self.box.add(self.label)
		self.show_all()

"""


code +="""
class MyWindow(Gtk.Window):
	def __init__(self):
		Gtk.Window.__init__(self, title = "Лабораторная работа №1")
		self.set_default_size(600, 500)

		self.notebook = Gtk.Notebook()
		self.add(self.notebook)

		self.cont = Gtk.Box(orientation = Gtk.Orientation.HORIZONTAL)
		self.notebook.add(self.cont)


		self.sw = Gtk.ScrolledWindow()
		self.box = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
		self.cont.pack_start(self.box, True, True, 0)
		self.box2 = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
		self.sw.add_with_viewport(self.box2)

		self.btn_run = Gtk.Button(label = "Выдать диагноз")
		self.btn_run.connect("clicked", self.diagnose)
		self.box.pack_start(self.sw, True, True, 0)
		self.box.pack_start(self.btn_run, False, True, 0)

		self.textv = Gtk.TextView()
		self.text_buf = self.textv.get_buffer()
		self.sw_tv = Gtk.ScrolledWindow()
		self.cont.pack_start(self.sw_tv, True, True, 0)
		self.sw_tv.add(self.textv)

		cp = self.notebook.get_nth_page(self.notebook.get_current_page())
		self.notebook.set_tab_label_text(cp, "Прямая цепочка")

		self.box_rev = Gtk.Box(orientation = Gtk.Orientation.HORIZONTAL)
		self.label_rev = Gtk.Label("Обратная цепочка")
		self.notebook.append_page(self.box_rev, self.label_rev)

		self.vbox_rev = Gtk.Box(orientation = Gtk.Orientation.VERTICAL)
		self.box_rev.pack_start(self.vbox_rev, False, False, 0)
		self.tv_rev = Gtk.TextView()
		self.text_rev_buf = self.tv_rev.get_buffer()
		self.box_rev.pack_start(self.tv_rev, True, True, 0)

		self.dia_store = Gtk.ListStore(int, str)

"""

with open("rules.txt") as f:
	num = 0
	for line in f:
		d = line.split(" ")[-1].replace('"', '').replace('\r', '').replace('\n', '').replace('_', ' ')
		code += "		self.dia_store.append([" + str(num) + ", '" + d + "'])\n"
		num += 1

code += """		self.combo = Gtk.ComboBox.new_with_model_and_entry(self.dia_store)
		self.combo.set_entry_text_column(1)
		self.vbox_rev.pack_start(self.combo, False, False, 0)
		
		self.rev_btn = Gtk.Button(label="Предположить")
		self.rev_btn.connect("clicked", self.ctd)
		self.vbox_rev.pack_start(self.rev_btn, False, False, 0)
"""

for desc, var_name in var_replacement:
	code += "		self.cb_%s = Gtk.CheckButton(label='%s')\n" %(var_name, desc.replace("_", " "))
	code += "		self.box2.pack_start(self.cb_%s, True, True, 0)\n" %(var_name)


code += """
	def ctd(self, widget):
		tree_iter = self.combo.get_active_iter()
		all_good = True
		bbuf = ""
		if tree_iter != None:
			model = self.combo.get_model()
			des_id, desis = model[tree_iter][:2]
			bbuf += "Выдвигаем гипотезу: диагноз - " + desis + "\\n"
			self.text_rev_buf.set_text(bbuf)
			for s in symptoms[des_id]:
				bbuf += "Уточнение симптома: " + s + " ... "
				self.text_rev_buf.set_text(bbuf)
				d = MyDialog(self, s)
				r = d.run()
				if r == Gtk.ResponseType.CANCEL:
					bbuf += " симптом не подтверждён\\n"
					self.text_rev_buf.set_text(bbuf)
					d.destroy()
					all_good = False
					break
				d.destroy()
				bbuf += " симптом подтверждён\\n"
				self.text_rev_buf.set_text(bbuf)

			if not all_good:
				bbuf += "Гипотеза не верна"
			else:
				bbuf += "Гипотеза подтвердилась"
			self.text_rev_buf.set_text(bbuf)
"""

code += "	def get_symptoms(self):\n"
for _, v in var_replacement:
	code += "		global {0}\n".format(v)
	code += "		{0} = self.cb_{0}.get_active()\n".format(v)

code +="""
	def explain_direct(self, diagnosis):
		self.text_buf.set_text(diagnosises[diagnosis])

	def diagnose(self, widget):
		DIAGNOSE = ''
		self.get_symptoms()
"""


for r in rules:
	code += "		" + r
code += "		self.text_buf.set_text('')\n"
code += "		self.text_buf.set_text(diagnosises[DIAGNOSE])\n\n"

code +="""
w = MyWindow()
w.connect("delete-event", Gtk.main_quit)
w.show_all()
Gtk.main()
"""
print(code)
