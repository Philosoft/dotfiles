import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.BoxLayout;
import javax.swing.Box;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.JButton;
import java.awt.Dimension;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.*;

import javax.sound.sampled.DataLine;
import javax.sound.sampled.TargetDataLine;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.AudioFileFormat;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

class SimpleAudio extends Thread
{
	private JTextArea a;
	public TargetDataLine m_line;
	private AudioFileFormat.Type m_targetType;
    	private AudioFormat m_format;
    	private AudioInputStream m_audioInputStream;
	private File m_outputFile;
	private XYSeriesCollection xyDataset;

	SimpleAudio(JTextArea ar, File file, XYSeriesCollection xy)
	{
		a = ar;
		m_outputFile = file;
		xyDataset = xy;

		m_audioInputStream = null;
		try 
		{
			m_targetType = AudioFileFormat.Type.WAVE;
			m_audioInputStream = null;
			m_audioInputStream = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream(m_outputFile)));
			m_format = m_audioInputStream.getFormat();
			m_line = null;
			DataLine.Info info = new DataLine.Info(TargetDataLine.class, m_format);
			m_line = (TargetDataLine) AudioSystem.getLine(info);
			m_line.open(m_format);
			m_line.start();	
		} 
		catch (Exception e) 
		{
			a.append(e + "\n");
			e.printStackTrace();
		}
		this.start();
	}

	public void run()
	{
		XYSeries series1 = new XYSeries("Голос");
		int count = 0, cnt, ct = 0;
		int Aemin, Aemax, Amin, Amax;
		byte[] B;
		int[] C, A;

		Aemin = -1100;
		Aemax = -950;
		Amin = -3000;
		Amax = 1000;
		try 
		{
			count = (int) (m_audioInputStream.getFrameLength()) * (m_audioInputStream.getFormat().getFrameSize());
			count = (int) m_audioInputStream.available();
			B = new byte[count];
			C = new int[count/2];
			count = m_audioInputStream.read(B);
			a.append("Обработка записи.");

			for(int i = 0; i < count;)
			{
				int low = (int) B[i];
				i++;
				int high = (int) B[i];
				i++;
				int sample = (high << 8) + (low & 0x00ff);
				// if((sample > Aemin && sample < Aemax) || sample < Amin || sample > Amax);
				// else
				// {

					  if( (sample < 600 && sample > 0) || (sample > -600 && sample < 0)) sample = 0;
					C[ct] = sample;
					ct++;
				// }				
			}

			count = ct;
			A = new int[count];
			cnt = 0;

			for(int i = 0; i < count; i++)
			{
				A[i] = C[i];
				series1.add(i, A[i]);
			}
			xyDataset.addSeries(series1);
			a.append("...ok\n");
		} 
		catch (Exception e) 
		{
			a.append("Try again later.\n");
			e.printStackTrace();
		}
	}
}

class SimpleAudioRecorder extends Thread
{
    	private JTextArea a;
	public TargetDataLine m_line;
    	private AudioFileFormat.Type m_targetType;
    	private AudioInputStream m_audioInputStream;
   	private File m_outputFile;

	public SimpleAudioRecorder(File file, JTextArea ar)
    	{
		a = ar;
		m_outputFile = file;

		try
		{
			AudioFormat m_audioFormat = new AudioFormat(44000, 16, 1, true, true);
			DataLine.Info info = new DataLine.Info(TargetDataLine.class, m_audioFormat);
			m_line = null;
			m_line = (TargetDataLine) AudioSystem.getLine(info);
			m_line.open(m_audioFormat);
			m_targetType = AudioFileFormat.Type.WAVE;
			m_audioInputStream = new AudioInputStream(m_line);
			a.append("...ok.\n");
		}
		catch (Exception e)
		{
			a.append(e + "\n");
			e.printStackTrace();
		}
    	}

	public void start()
	{
        	m_line.start();
        	super.start();
	}

	public void stopRecording()
    	{
        	m_line.stop();
        	m_line.close();
		a.append("...ok.\n");
    	}

	public void run()
    	{
            	try
            	{
               		AudioSystem.write(m_audioInputStream, m_targetType, m_outputFile);
            	}
            	catch (Exception e)
            	{
                	a.append(e + "\n");
		}
    	}
}

class Wind extends JFrame
{
	private JButton b[];
	private JTabbedPane tp;
	private JTabbedPane tp2;
	private JPanel p[];
	private JTextArea a;
	private JTextArea arr[];
	private JScrollPane sp; 
	private JLabel lbl[];
	private ChartPanel panel[];
	private ChartPanel pan[];
	private XYSeriesCollection xyDataset[];
	private XYSeriesCollection xy[];
	private SimpleAudioRecorder recorder;
	private SimpleAudio audio;

	class ButtonClicked implements ActionListener
    	{
        	public void actionPerformed(ActionEvent ae)
        	{
			if(ae.getSource() == b[0])
			{
				String  strFilename = "user.wav";
				File    outputFile = new File(strFilename);
				a.setText("");
				xyDataset[0].removeAllSeries();
				a.append("Start recording.");
				recorder = new SimpleAudioRecorder(outputFile, a);
				recorder.start();
			}
			else if(ae.getSource() == b[1])
			{
				try
				{
					a.append("Stop recording.");
					recorder.stopRecording();				

					String name = "user.wav";
					File soundFile = new File(name);
					audio = new SimpleAudio(a, soundFile, xyDataset[0]);
				}
				catch(Exception e)
				{
					a.append("Try again later.\n");
				}
			}
		}
    	}
	
    	Wind(String title)
	{
		super(title);
		File[] file = new File[5];
		XYSeries[] xys = new XYSeries[5];
		for(int i = 0; i < 5; i++)
			xys[i] = new XYSeries("Голос");

		file[0] = new File("./base/1.wav");
		file[1] = new File("./base/2.wav");
		file[2] = new File("./base/3.wav");
		file[3] = new File("./base/4.wav");
		file[4] = new File("./base/5.wav");
		
		arr = new JTextArea[7];
		p = new JPanel[3];
		b = new JButton[2];
		lbl = new JLabel[2];
		panel = new ChartPanel[2];
		pan = new ChartPanel[5];
		xyDataset = new XYSeriesCollection[2];
		xy = new XYSeriesCollection[5];

		a = new JTextArea("");
		tp = new JTabbedPane();
		tp2 = new JTabbedPane();
		sp = new JScrollPane();

		lbl[0] = new JLabel("Произнесите ключевую фразу");
		lbl[1] = new JLabel("Информация для пользователя");

		p[0] = new JPanel();
		p[1] = new JPanel();
		p[2] = new JPanel();

		sp = new JScrollPane(a);
		b[0] = new JButton("Начать запись голоса");
		b[1] = new JButton("Закончить запись и проверить");
		
		for(int i = 0; i < 7; i++)
			arr[i] = new JTextArea("");

		for(int i = 0; i < 2; i++)
			xyDataset[i] = new XYSeriesCollection();
		for(int i = 0; i < 5; i++)
			xy[i] = new XYSeriesCollection();
		
		JFreeChart chart1 = ChartFactory.createXYLineChart("Результат", "Голос", "Частота", xyDataset[0], PlotOrientation.VERTICAL, true, true, false);	
		JFreeChart chart2 = ChartFactory.createXYLineChart("Голос", "Голос", "Частота", xyDataset[1], PlotOrientation.VERTICAL, true, true, false);	
		JFreeChart chart3 = ChartFactory.createXYLineChart("Голос1", "Голос", "Частота", xy[0], PlotOrientation.VERTICAL, true, true, false);	
		JFreeChart chart4 = ChartFactory.createXYLineChart("Голос2", "Голос", "Частота", xy[1], PlotOrientation.VERTICAL, true, true, false);
		JFreeChart chart5 = ChartFactory.createXYLineChart("Голос3", "Голос", "Частота", xy[2], PlotOrientation.VERTICAL, true, true, false);	
		JFreeChart chart6 = ChartFactory.createXYLineChart("Голос4", "Голос", "Частота", xy[3], PlotOrientation.VERTICAL, true, true, false);
		JFreeChart chart7 = ChartFactory.createXYLineChart("Голос5", "Голос", "Частота", xy[4], PlotOrientation.VERTICAL, true, true, false);	

		panel[0] = new ChartPanel(chart1);
		panel[1] = new ChartPanel(chart2);
		pan[0] = new ChartPanel(chart3);
		pan[1] = new ChartPanel(chart4);
		pan[2] = new ChartPanel(chart5);
		pan[3] = new ChartPanel(chart6);
		pan[4] = new ChartPanel(chart7);

		p[0].setLayout(new BoxLayout(p[0], BoxLayout.Y_AXIS));
		p[1].setLayout(new BoxLayout(p[1], BoxLayout.Y_AXIS));
		p[2].setLayout(new BoxLayout(p[2], BoxLayout.Y_AXIS));

		Box box1 = Box.createHorizontalBox();
		Box box2 = Box.createHorizontalBox();
		Box box3 = Box.createHorizontalBox();
		Box box4 = Box.createHorizontalBox();
		Box box5 = Box.createHorizontalBox();
		Box box6 = Box.createHorizontalBox();
		Box box7 = Box.createHorizontalBox();
		Box box8 = Box.createHorizontalBox();
		Box box9 = Box.createHorizontalBox();

		p[0].add(Box.createVerticalStrut(20));
		box1.add(Box.createHorizontalStrut(20));
		lbl[0].setPreferredSize(new Dimension(900, 20));
		box1.add(lbl[0]);
		box1.add(Box.createHorizontalStrut(20));
		p[0].add(box1);
		
		p[0].add(Box.createVerticalStrut(20));
		box2.add(Box.createHorizontalStrut(20));
		b[0].setPreferredSize(new Dimension(440, 20));
		b[1].setPreferredSize(new Dimension(440, 20));
		box2.add(b[0]);
		box2.add(Box.createHorizontalStrut(20));
		box2.add(b[1]);
		box2.add(Box.createHorizontalStrut(20));
		p[0].add(box2);

		p[0].add(Box.createVerticalStrut(20));
		box3.add(Box.createHorizontalStrut(20));
		lbl[1].setPreferredSize(new Dimension(900, 20));
		box3.add(lbl[1]);
		box3.add(Box.createHorizontalStrut(20));
		p[0].add(box3);

		p[0].add(Box.createVerticalStrut(20));
		box4.add(Box.createHorizontalStrut(20));
		sp.setPreferredSize(new Dimension(900, 200));
		box4.add(sp);
		box4.add(Box.createHorizontalStrut(20));
		p[0].add(box4);
		p[0].add(Box.createVerticalStrut(320));

		p[1].add(Box.createVerticalStrut(5));
		panel[0].setPreferredSize(new Dimension(800, 310));
		arr[0].setPreferredSize(new Dimension(100, 310));
		box5.add(Box.createHorizontalStrut(10));
		box5.add(panel[0]);
		box5.add(Box.createHorizontalStrut(10));
		box5.add(arr[0]);
		box5.add(Box.createHorizontalStrut(10));
		p[1].add(box5);

		p[1].add(Box.createVerticalStrut(5));
		panel[1].setPreferredSize(new Dimension(800, 310));
		arr[1].setPreferredSize(new Dimension(100, 310));
		box6.add(Box.createHorizontalStrut(10));
		box6.add(panel[1]);
		box6.add(Box.createHorizontalStrut(10));
		box6.add(arr[1]);
		box6.add(Box.createHorizontalStrut(10));
		p[1].add(Box.createVerticalStrut(5));
		p[1].add(box6);

		p[2].add(Box.createVerticalStrut(5));
		pan[0].setPreferredSize(new Dimension(400, 205));
		arr[2].setPreferredSize(new Dimension(50, 205));
		pan[1].setPreferredSize(new Dimension(400, 205));
		arr[3].setPreferredSize(new Dimension(50, 205));
		box7.add(Box.createHorizontalStrut(5));
		box7.add(pan[0]);
		box7.add(Box.createHorizontalStrut(5));
		box7.add(arr[2]);
		box7.add(Box.createHorizontalStrut(5));
		box7.add(pan[1]);
		box7.add(Box.createHorizontalStrut(5));
		box7.add(arr[3]);
		box7.add(Box.createHorizontalStrut(5));
		p[2].add(box7);

		p[2].add(Box.createVerticalStrut(5));
		pan[2].setPreferredSize(new Dimension(400, 205));
		arr[4].setPreferredSize(new Dimension(50, 205));
		pan[3].setPreferredSize(new Dimension(400, 205));
		arr[5].setPreferredSize(new Dimension(50, 205));
		box8.add(Box.createHorizontalStrut(5));
		box8.add(pan[2]);
		box8.add(Box.createHorizontalStrut(5));
		box8.add(arr[4]);
		box8.add(Box.createHorizontalStrut(5));
		box8.add(pan[3]);
		box8.add(Box.createHorizontalStrut(5));
		box8.add(arr[5]);
		box8.add(Box.createHorizontalStrut(5));
		p[2].add(box8);

		p[2].add(Box.createVerticalStrut(5));
		pan[4].setPreferredSize(new Dimension(400, 205));
		arr[6].setPreferredSize(new Dimension(50, 205));
		box9.add(Box.createHorizontalStrut(5));
		box9.add(pan[4]);
		box9.add(Box.createHorizontalStrut(5));
		box9.add(arr[6]);
		box9.add(Box.createHorizontalStrut(465));
		p[2].add(Box.createVerticalStrut(5));
		p[2].add(box9);


		tp2.addTab("Диаграммы", p[1]);
		tp2.addTab("Критерии", p[2]);

		tp.addTab("Ввод", p[0]);
		tp.addTab("Графики", tp2);

		Container c = getContentPane();
		c.add(tp);

		for(int j = 0; j < 5; j++)
		{
			try 
			{
				AudioInputStream a_Stream = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream(file[j])));
				int count = 0, cnt, ct = 0;
				int Aemin, Aemax, Amin, Amax;
				byte[] B;
				int[] C, A;

				Aemin = -1100;
				Aemax = -950;
				Amin = -3000;
				Amax = 1000;
				
				count = (int) (a_Stream.getFrameLength()) * (a_Stream.getFormat().getFrameSize());
				count = (int) a_Stream.available();
				B = new byte[count];
				C = new int[count/2];
				count = a_Stream.read(B);
				a.append("Обработка записи.");

				for(int i = 0; i < count;)
				{
					int low = (int) B[i];
					i++;
					int high = (int) B[i];
					i++;
					int sample = (high << 8) + (low & 0x00ff);
					//if((sample > Aemin && sample < Aemax) || sample < Amin || sample > Amax);
					//else
					//{

					  if( (sample < 600 && sample > 0) || (sample > -600 && sample < 0)) sample = 0;

					  C[ct] = sample;
					  xys[j].add(ct, C[ct]);
					  ct++;
					//}				
				}
			}
			catch(Exception e)
			{
			}
		}


		for(int i = 0; i < 1; i++)
		{
			xy[i].addSeries(xys[i]);
		}

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		b[0].addActionListener(new ButtonClicked());
		b[1].addActionListener(new ButtonClicked());
	}
}

public class record 
{

	public static void main(String[] argv) 
	{
		Wind w = new Wind("Лабораторная работа #2");
		w.setSize(1000, 700);
		w.show();
	}
}
