#!/usr/bin/python3

import sys
import os
import re
from optparse import OptionParser

"""Скрипт для приведения коллекции к соответствию с CMCS (Common Music Collection Structure)
Создаёт каталог _album_info и пихает в него всё, кроме музыкальных файлов и файла cover.jpg
"""

###
# Constants
###
VERSION = '0.2'
EXCLUDE_LIST = re.compile('(.*\.(mp3|ogg|flac|ape|cue|wma))|(cover.jpg)')

colours = {
            'none'       :    "",
            'default'    :    "\033[0m",
            'bold'       :    "\033[1m",
            'underline'  :    "\033[4m",
            'blink'      :    "\033[5m",
            'reverse'    :    "\033[7m",
            'concealed'  :    "\033[8m",

            'black'      :    "\033[30m",
            'red'        :    "\033[31m",
            'green'      :    "\033[32m",
            'yellow'     :    "\033[33m",
            'blue'       :    "\033[34m",
            'magenta'    :    "\033[35m",
            'cyan'       :    "\033[36m",
            'white'      :    "\033[37m",

            'on_black'   :    "\033[40m",
            'on_red'     :    "\033[41m",
            'on_green'   :    "\033[42m",
            'on_yellow'  :    "\033[43m",
            'on_blue'    :    "\033[44m",
            'on_magenta' :    "\033[45m",
            'on_cyan'    :    "\033[46m",
            'on_white'   :    "\033[47m",

            'beep'       :    "\007"
            }

###
# Functions
###
def print_verinfo():
    print("CMCS script ver", colours['green'], VERSION, colours['default'])

def action(act, path, verbose = False):
    if act == 'mkdir':
        if not os.path.exists(path):
            os.mkdir(path)
    elif act == 'rmdir':
        if os.path.isdir(path) and os.listdir(path) == []:
            os.rmdir(path)

def work_with_folders(root, act='mkdir', dir='_tmp', verbose=False):
    '''root should be abspath'''
    path = root
    os.chdir(path)
    for artist in os.listdir('.'):
        if os.path.isdir(artist):
            path = os.path.join(root, artist)
            for album in os.listdir(path):
                path = os.path.join(path, album, dir)
                action(act, path, verbose)
                if verbose:
                    print(act, path)
                path = os.path.join(root, artist)

def ensure_abspath(path):
    apath = os.path.abspath(os.path.expanduser(path))
    return apath

def mv_to_tmp(root, verbose = False):
    path = root
    os.chdir(path)
    for artist in os.listdir(path):
        if os.path.isdir(artist):
            path = os.path.join(root, artist)
            for album in os.listdir(path):
                path = os.path.join(path, album)
                if not re.search(EXCLUDE_LIST, path.lower()):
                    print(path)
                    os.rename(path, os.path.join(root, artist, album, '_tmp/'))
                path = os.path.join(root, artist)

parser = OptionParser()
parser.add_option("-v", "--verbose", dest="verbose_flag", help="verbose mode", action="store_true", default=False)
parser.add_option("-V", "--version", dest="ver_flag", help="print version info and exit", action="store_true", default=False)
parser.add_option("-d", "--dest", dest="p", help="destination dir [with music collection]", metavar="/path/to/dir/")

(opts, args) = parser.parse_args()

if opts.ver_flag:
    print_verinfo()
    sys.exit()

if opts.p is None:
    root_path = os.getcwd()
    if opts.verbose_flag:
        print("We will use current [", root_path, "] dir")
else:
    root_path = opts.p

root_path = ensure_abspath(root_path)

work_with_folders(root_path, verbose = opts.verbose_flag)
work_with_folders(root_path, act = 'rmdir', verbose = opts.verbose_flag)
mv_to_tmp(root_path, opts.verbose_flag)
