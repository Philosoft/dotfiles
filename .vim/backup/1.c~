#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define COL 3
#define LEN 50
typedef struct
{
	char name[LEN];
	int grade;
}Student;

typedef Student (*studentMatType)[COL];	//טיפוס של מצביע למטריצה
typedef unsigned int uint;

/***************  Function prototype *************/
studentMatType getStudentsIntoMat(int row);		//קליטת סטודנטים למטריצה
void checkAlloc(void *p);				//בדיקת הקצאה
void printMatStudents(const studentMatType pMat , int row);	//הדפסת מטריצת סטודנטים
void sortMatCols(studentMatType pMat , int row);		//מיו עמודות מטריצה
void bubbleSortArrayStudents(Student *A , int n);		//מיון בועות מערך סטודנטים לפי שם
											//העברה ממטריצה למערך לפי חיפוש
Student *studentsMatIntoArray(const studentMatType pMat , int row , int *sizeArr);
										//חיפוש בינארי על עמודת מטריצה
int binarySearch(const studentMatType pMat , int col , int low , int high , const char  *x);
											//חיפוש סטודנט במערך
int searchInArrayStudents(const Student *Arr , int sizeArr , const char  *name);
void printArrStudents(const Student * p , int sizeArr);		//הדפסת מערך סטודנטים
//+-----------------------------------------------------------------+
void main()
{
	int sizeArr , row;
	Student *Arr;			//מצביע למערך סטודנטים
	studentMatType pMat;			//מצביע למטריצת סטודנטים
	puts("\nPlease insert how many rows do u want to have in mat: ");
	fflush(stdin);
	scanf("%d" , &row);			//קליטת שורות עבור המטריצה
	pMat = getStudentsIntoMat(row);		//יצירת המטריצה וקליטת סטודנטים

	printf ("\n\n check -- %c", pMat[2][1].name);
/*	puts("\nYour pMat is:\n");
	printMatStudents(pMat , row);		//הדפסת מטריצת סטודנטים
	sortMatCols(pMat , row);		//מיון עמודות מטריצה
	puts("\nYour pMat after sorting:\n");
	printMatStudents(pMat , row);		
	Arr  = studentsMatIntoArray(pMat , row , &sizeArr);		//העתקת סטודנטים ממטריצה למערך
	puts("\n\nYour array is:\n");
	printArrStudents(Arr , sizeArr);		//הדפסת מערך הסטודנטים
	free(Arr);					//שחרור הקצאות
	free(pMat);
	puts("\n\n");

	*/
}

studentMatType getStudentsIntoMat(int row)
{
    int i,j,grades;
    char names;

    Student input_data;
    studentMatType **p = (studentMatType**)malloc(COL * row * sizeof(char*));
    for(i=0;i<row;i++)
    {
        for(j=0;j<COL;j++)
        {
            printf("Please insert name for [%d][%d]:  ", i, j);
            fflush(stdin);
            scanf("%c", &input_data.name);
            //input_data.name = names;
            printf("Please insert grade for [%d][%d]:  ", i, j);
            fflush(stdin);
            scanf("%d", &input_data.grade);
            
            p[i] = &input_data;
        }
    }
    return p;
}
