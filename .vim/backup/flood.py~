#!/usr/bin/python
#-*- coding: utf-8 -*-

import os
import sys
import xmpp
import time
import random
import string

####### global definitions start #######
colours = {
            'none'       :    "",
            'default'    :    "\033[0m",
            'bold'       :    "\033[1m",
            'underline'  :    "\033[4m",
            'blink'      :    "\033[5m",
            'reverse'    :    "\033[7m",
            'concealed'  :    "\033[8m",

            'black'      :    "\033[30m",
            'red'        :    "\033[31m",
            'green'      :    "\033[32m",
            'yellow'     :    "\033[33m",
            'blue'       :    "\033[34m",
            'magenta'    :    "\033[35m",
            'cyan'       :    "\033[36m",
            'white'      :    "\033[37m",

            'on_black'   :    "\033[40m",
            'on_red'     :    "\033[41m",
            'on_green'   :    "\033[42m",
            'on_yellow'  :    "\033[43m",
            'on_blue'    :    "\033[44m",
            'on_magenta' :    "\033[45m",
            'on_cyan'    :    "\033[46m",
            'on_white'   :    "\033[47m",

            'beep'       :    "\007"
            }
opts = {'bots': 'bots.txt', 'nick': 'TEST_BOT'}

#servs = ['jabber.ru', 'jabber.org', 'xmpp.ru', 'jabber.jp', 'jabber.ua', 'jabber.freenet.de', 'ugatu.net', 'jabber.linux.it', 'nerd.pl', 'sudouser.ru', 'jabber.ukrwest.net',  'wippien.com']
servs = ['jabber.ru', 'jabber.jp']
####### global definitions end #######

####### functions start #######
def gen_new_name(length):
    alphabet = 'qwertyuioplkjhgfdsaZASDFzxcvbnmMNBVC5678XGHJKLPOIUYTREWQ123490'
    name = ''
    i = 0
    while i < length:
        i += 1
        name += alphabet[random.randrange(0, len(alphabet))]

    return name

def reg_new_jid(username, server, password, debug = 0):
    """Register new user on serv"""
    result = 0
    cl = xmpp.Client(server, debug = [])

    if debug:
        print ""
        print colours['red'], "Регистрируем нового бота", colours['default']

    if cl.connect() <> '' and debug:
        print "\tУспешный конекшн"
    if xmpp.features.register(cl, server, {"username": username, "password": password}) == 1:
        result = 1
        if debug:
            print colours['green'], "\tУспешная регистрация нового джида", colours['default']
            print "\tДанные jid: %s@%s pass: %s" %(username, server, password)
            print "\tСохроним-ка это в файлек"
    try:
        f = open(opts['bots'], "a")
        try:
            f.write('jid = ' + username + '@' + server + ' passwd = ' + password + "\n")
        finally:
            f.close()
    except IOError, e:
        print "\tWARNING: не удалось записать новы жид в файл"
        print e.filename + ': ' + e.strerror

    print ""
    return result

def del_bot(JID, passwd):
    result = 0
    jid = xmpp.JID(JID)
    cl = xmpp.Client(jid.getDomain(), debug = [])
    if cl.connect() is None:
        return result
    try:
        auth_res = cl.auth(jid.getNode(), passwd)
    except AttributeError:
        return result

    if auth_res is not None:
        xmpp.features.unregister(cl, jid.getDomain())
        result = 1

    return result

def messageCB(s, msg):
    """message handler"""
    nick = msg.getFrom().getResource()
    text = msg.getBody()
    if nick <> '':
        print "%s:  %s" %(nick, text)

def presenceCB(s, p):
    """Presence handler"""
    nick = p.getFrom().getResource()
    text = ''
    #print "%s is %s" %(nick, p.getType())
####### functions end #######

####### class Bot start #######
class Bot:
    """Simplest flood bot"""

    def __init__(self, JID, Password, debug = 0):
        """Init"""
        self.debug = debug
  #      self.nick = opts['nick']
        self.nick = gen_new_name(random.randrange(1, 20))
        self.rooms = []

        jid = xmpp.JID(JID)

        self.cl = xmpp.Client(jid.getDomain(), debug = [])
        con_result = self.cl.connect()
        if self.debug:
            print "==="*4
            print "Starting new bot..."
            print "Bot jid: %s passwd: %s" %(JID, Password)
            print "Connecting to %s" %jid.getDomain()
            if con_result <> 'tls':
                print "We have NOT tls enabled"
            if con_result <> 'sasl':
                print "We have NOT sasl enabled"

        auth_result = self.cl.auth(jid.getNode(), Password)

        if not auth_result:
            print "Не авторизируют нас :("
            self.stop()
            return
        if self.debug:
            print "Успешная авторизация"
        self.cl.sendInitPresence()

    def autosetup(self):
        self.cl.RegisterHandler('message',  messageCB)
        self.cl.RegisterHandler('presence', presenceCB)

    def stop(self):
        self.cl.disconnect()

    def inRoom(self, room):
        if room in self.rooms:
            return True
        else:
            return False

    def room_join(self, room):
        if self.inRoom(room):
            if self.debug:
                print "Уже в комнате"
            return
        else:
            if self.debug:
                print "Добовляем комнату в список"
            self.rooms.append(room)

            p = xmpp.Presence(to = room + '/' + self.nick)
            p.setTag('x', namespace = xmpp.NS_MUC).setTagData('password','')
            p.setTag('x').addChild('history', {'maxchars': '0', 'naxstanzas': '0'})
            self.cl.send(p)

    def room_send_msg(self, room, msg):
        if not self.inRoom(room):
            if self.debug:
                print "Бота нету в комнате, заходим"

            self.room_join(room)

        self.cl.send(xmpp.Message(xmpp.JID(room), msg, typ = 'groupchat'))

    def msg_send(self, msg, JID):
        if self.debug:
            print "Sending msg: %s to %s" %(msg, JID)

        my_msg = xmpp.protocol.Message(JID, msg)
        print self.cl.send(my_msg)

    def main_loop(self):
        """Нужен для логов / вопросов / ответов / команд"""
        try:
            while True:
                self.cl.Process(1)
        except KeyboardInterrupt:
            if self.debug:
                print "Прерывание с клавиатуры"
            self.stop()
            pass

    def helper(self):
        self.cl.Process(1)
####### class Bot end #######

#target_room = "simpleApps@conference.jabber.ru"
#target_room = "qvest@conference.jabber.ru"
#target_jid = "ginonfire@jabber.ru"
#target_room = "курилка@conference.jabber.ru"
#target_room = 'sex@conference.jabber.ru'
i = 0

while i < 30:
    msg_set = ['Пидоры', 'Stop spam', 'Хватит спамить уроды', 'СПАМ СПАМ СПАМ СПАМ СПАМ СПАМ СПАМ (консервы такие были, если кто не знает)', 'Прыщеблядки убейтесь', 'Еби вас конь', 'Что вам запор на 10 дней', 'simpleApps хуита на заказ от говнокодеров-уёбышей', 'Симплер мудак деньги берёт даёт палёных ботов и спамит клиентов']

    jid = gen_new_name(15) + '@' + servs[random.randrange(0, len(servs))]
    print ""
    print "%2d. Trying %s" %(i, jid.split('@')[1])
    if reg_new_jid(jid.split('@')[0], jid.split('@')[1], "123456", debug = 1):
        bot = Bot(jid, "123456")#, debug = 1)
        bot.autosetup()
        #bot.room_join(target_room)
        print colours['cyan'], "Начали флудить", colours['default']
        j = 0
        while j < 16:
            time.sleep(1)
            print j,
           # bot.room_send_msg(target_room, "Все идём конерецыю курилка@conference.jabber.ru все сасут курилка круче всех на!1111 Вы все лохи на!1111 Еби вас конь!!111")#msg_set[random.randrange(0, len(msg_set))])
            bot.msg_send('ololo', 'thephilosoft@gmail.com')
            bot.helper()
            j += 1
        bot.stop()
        del bot
    i += 1

# Удаление использованных ботов
f = open(opts['bots'], "r")
jid = (f.readline()).split(' ')[2]
while jid <> '':
    print "Удаляем ", jid,
    if del_bot(jid, "123456"):
        print colours['green'], "  успешно", colours['default']
    else:
        print colours['red'], "  неудача", colours['default']
    try:
        jid = (f.readline()).split(' ')[2]
    except IndexError:
        sys.exit()

f.close()
f = open(opts['bots'], "w")
f.write("")
f.truncate(0)
f.close()
